apply plugin: 'com.android.application'

android {
    compileSdkVersion 30
    defaultConfig {
        applicationId "com.sk.hannibal"
        minSdkVersion 21
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"
        multiDexEnabled true
    }

    signingConfigs {
        release {
            storeFile file(RELEASE_STORE_FILE)
            keyPassword RELEASE_STORE_PASSWORD
            keyAlias RELEASE_KEY_ALIAS
            storePassword RELEASE_KEY_PASSWORD
        }
    }

    buildTypes {
        release {
            shrinkResources true //去除无用资源
            zipAlignEnabled true

            signingConfig signingConfigs.release


            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        debug {
            signingConfig signingConfigs.release


            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    //指定jdk版本
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    lintOptions {
        ignoreWarnings true
        abortOnError false
    }
    sourceSets { main { assets.srcDirs = ['src/main/assets', 'src/main/assets/'] } }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'androidx.multidex:multidex:2.0.1'
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'com.jakewharton:butterknife:10.0.0'
    annotationProcessor 'com.jakewharton:butterknife-compiler:10.0.0'
    implementation 'com.squareup.okhttp3:okhttp:3.11.0'

    implementation 'com.aliyun.ams:alicloud-android-hotfix:3.2.14'
}

//apply plugin: 'hannibal'
//import com.hannibal.gradle.utils.*
//import org.objectweb.asm.*
//
//hannibal {
//    //下面这个参数仅仅影响log输出，为本次修改命名，无实际意义，不配置也可以
//    hannibalModifyName = 'Hannibal'
//    //设置为true可以显示帮助内容，默认为true
//    showHelp = true
//    //下面的参数设置为true时会输出工程编译耗时信息
//    watchTimeConsume = true
//
//    printLog = true
//
//    adjustFlutterBoost = true
//
//    //this is the most important part
//    modifyMatchMaps = [
//            '*Activity|*Receiver|!android*': [
//                    ['methodName': 'on**', 'methodDesc': '(Landroid/view/View;)V', 'adapter': {
//                        ClassVisitor cv, int access, String name, String desc, String signature, String[] exceptions ->
//                            MethodVisitor methodVisitor = cv.visitMethod(access, name, desc, signature, exceptions);
//                            MethodVisitor adapter = new MethodLogAdapter(methodVisitor) {
//                                @Override
//                                void visitCode() {
//                                    super.visitCode();
//                                    methodVisitor.visitFieldInsn(Opcodes.GETSTATIC, "java/lang/System", "out", "Ljava/io/PrintStream;");
//                                    methodVisitor.visitLdcInsn("========start=========");
//                                    methodVisitor.visitMethodInsn(Opcodes.INVOKEVIRTUAL, "java/io/PrintStream", "println", "(Ljava/lang/String;)V", false);
//
//
//                                    methodVisitor.visitLdcInsn(name);
//                                    methodVisitor.visitMethodInsn(Opcodes.INVOKESTATIC, "java/lang/System", "nanoTime", "()J", false);
//                                    methodVisitor.visitMethodInsn(Opcodes.INVOKESTATIC, "com/hannibal/scalpel/task/CostTimeTask", "setStartTime", "(Ljava/lang/String;J)V", false);
//
//
//                                    methodVisitor.visitVarInsn(25, 0);
//                                    methodVisitor.visitVarInsn(25, 1);
//                                    //methodVisitor.visitLdcInsn(desc);
//                                    methodVisitor.visitLdcInsn(name);
//                                    //下面这行代码 为要调用的方法，请酌情修改
//                                    methodVisitor.visitMethodInsn(Opcodes.INVOKESTATIC,
//                                            "com/hannibal/scalpel/task/PickOutTask",
//                                            "hookOnClickEvents", "(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V", false);
//
//                                }
//
//                                @Override
//                                void visitInsn(int opcode) {
//                                    super.visitInsn(opcode)
////                                    if (opcode == Opcodes.RETURN) {
////
////                                    }
//
//                                    methodVisitor.visitLdcInsn(name);
//                                    methodVisitor.visitMethodInsn(Opcodes.INVOKESTATIC, "java/lang/System", "nanoTime", "()J", false);
//                                    methodVisitor.visitMethodInsn(Opcodes.INVOKESTATIC, "com/hannibal/scalpel/task/CostTimeTask", "setEndTime", "(Ljava/lang/String;J)V", false);
//                                    methodVisitor.visitFieldInsn(Opcodes.GETSTATIC, "java/lang/System", "out", "Ljava/io/PrintStream;");
//                                    methodVisitor.visitLdcInsn(name);
//                                    methodVisitor.visitMethodInsn(Opcodes.INVOKESTATIC, "com/hannibal/scalpel/task/CostTimeTask", "getCostTime", "(Ljava/lang/String;)Ljava/lang/String;", false);
//                                    methodVisitor.visitMethodInsn(Opcodes.INVOKEVIRTUAL, "java/io/PrintStream", "println", "(Ljava/lang/String;)V", false);
//                                    methodVisitor.visitFieldInsn(Opcodes.GETSTATIC, "java/lang/System", "out", "Ljava/io/PrintStream;");
//                                    methodVisitor.visitLdcInsn("========end=========");
//                                    methodVisitor.visitMethodInsn(Opcodes.INVOKEVIRTUAL, "java/io/PrintStream", "println", "(Ljava/lang/String;)V", false);
//                                }
//                            }
//                            return adapter;
//                    }]
//            ]
//            ,
//            '*View': [
//                    ['methodName': 'dispatchTouchEvent', 'methodDesc': '(Landroid/view/MotionEvent;)Z', 'adapter': {
//                        ClassVisitor cv, int access, String name, String desc, String signature, String[] exceptions ->
//                            MethodVisitor methodVisitor = cv.visitMethod(access, name, desc, signature, exceptions);
//                            MethodVisitor adapter = new MethodLogAdapter(methodVisitor) {
//                                @Override
//                                void visitCode() {
//                                    super.visitCode();
//                                    //methodVisitor.visitLdcInsn(desc);
//                                    methodVisitor.visitVarInsn(25, 0);
//                                    methodVisitor.visitVarInsn(25, 1);
//                                    methodVisitor.visitLdcInsn(name);
//                                    methodVisitor.visitMethodInsn(Opcodes.INVOKESTATIC,
//                                                        "com/hannibal/scalpel/task/PickOutTask",
//                                                        "hookOnTouchEvents", "(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V", false);
//                                }
//                            }
//                            return adapter;
//                    }]
//            ]
//            ,
//            'com.sk.hannibal.base.BaseActivity' : [
//                    [ 'adapter': {
//                        ClassVisitor cv, int version, int access, String name, String signature, String superName, String[] interfaces ->
//                            ClassVisitor adapter = cv.visit(52, Opcodes.ACC_PUBLIC + Opcodes.ACC_SUPER + Opcodes.ACC_ABSTRACT,
//                                    "com/sk/hannibal/base/BaseActivity", null, "androidx/appcompat/app/FontCompatActivity", null);
////                            ClassVisitor adapter = new ClassLogAdapter(classVisitor) {
////
////                                @Override
////                                void visit(int version, int access, String name, String signature, String superName, String[] interfaces) {
////                                    super.visit(version, access, name, signature, superName, interfaces)
////
////                                    classVisitor.visit(52, Opcodes.ACC_PUBLIC + Opcodes.ACC_SUPER + Opcodes.ACC_ABSTRACT,
////                                            "com/sk/hannibal/base/BaseActivity", null, "androidx/appcompat/app/FontCompatActivity", null);
////                                }
////                            }
//                            return adapter;
//                    }
//
//                    ]
//            ]
//    ]
//}